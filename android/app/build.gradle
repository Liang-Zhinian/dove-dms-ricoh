apply plugin: "com.android.application"
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
    entryFile: "index.js"
]

apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false


// Define versions in a single place
ext {
    // Sdk and tools
//    minSdkVersion = 10
//    targetSdkVersion = 10
//    compileSdkVersion = 10
//    buildToolsVersion = '25.0.2'

    // App dependencies
//    supportVersion = '25.2.0'
//    kotlinVersion = '1.1.1'
    ankoVersion = '0.9.1'
    rxjavaVersion = '1.2.7'
    rxandroidVersion = '1.2.1'
    retrofit2Version = '2.2.0'
}

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    useLibrary 'org.apache.http.legacy'

    defaultConfig {
        applicationId "com.dove.sample.app.scan"
        minSdkVersion 16
        targetSdkVersion 17
        versionCode 1
        versionName "1.08.00"
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
    }

     signingConfigs {
         release {
             if (project.hasProperty('MYAPP_RELEASE_STORE_FILE')) {
                 storeFile file(MYAPP_RELEASE_STORE_FILE)
                 storePassword MYAPP_RELEASE_STORE_PASSWORD
                 keyAlias MYAPP_RELEASE_KEY_ALIAS
                 keyPassword MYAPP_RELEASE_KEY_PASSWORD
             }
         }
     }

    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"

            signingConfig signingConfigs.release
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

dependencies {
    compile project(':react-native-code-push')
    compile project(':react-native-svg')
    compile project(':react-native-image-picker')
    compile project(':react-native-fs')
    compile project(':react-native-fetch-blob')
    compile project(':react-native-doc-viewer')
    compile project(':react-native-vector-icons')
    compile fileTree(dir: "libs", include: ["*.jar"])
    compile "com.android.support:appcompat-v7:25.0.2"
    compile "com.facebook.react:react-native:+"  // From node_modules
    compile "com.android.support:multidex:1.0.0"
    compile 'org.apache.httpcomponents:httpcore:4.4.2'
    compile 'com.android.support:support-v4:25.0.2'
    compile files('libs/jsonic-1.3.0.jar')
//    compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"

    // kotlin dependencies
//    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
//    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    // anko dependencies
//    compile "org.jetbrains.anko:anko-common:$ankoVersion"
//    compile "org.jetbrains.anko:anko-sdk15:$ankoVersion"
//    compile "org.jetbrains.anko:anko-support-v4:$ankoVersion"
//    compile "org.jetbrains.anko:anko-appcompat-v7:$ankoVersion"
//    compile "org.jetbrains.anko:anko-design:$ankoVersion"
//    compile "org.jetbrains.anko:anko-percent:$ankoVersion"
//    compile "org.jetbrains.anko:anko-recyclerview-v7:$ankoVersion"
//
//    compile 'org.apache.commons:commons-lang3:3.5'

    // reactivex dependencies
//    compile "io.reactivex:rxandroid:$rxandroidVersion"
//    compile "io.reactivex:rxjava:$rxjavaVersion"
//    compile "com.squareup.retrofit2:adapter-rxjava:$retrofit2Version"

    // retrofit2 dependencies
//    compile "com.squareup.retrofit2:retrofit:$retrofit2Version"
//    compile "com.squareup.retrofit2:converter-gson:$retrofit2Version"
//
//    provided 'org.projectlombok:lombok:1.12.6'
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
repositories {
    mavenCentral()
}
